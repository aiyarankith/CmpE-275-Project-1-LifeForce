// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "comm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NameValueSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameValueSet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NameValueSet_NodeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NameSpace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameSpace_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobDesc_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* JobDesc_JobCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameSpaceOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameSpaceOperation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NameSpaceOperation_SpaceAction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NameSpaceStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameSpaceStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobOperation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* JobOperation_JobAction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* JobProposal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobProposal_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobBid_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoutingPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoutingPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Header_Routing_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Payload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Payload_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Heartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Network_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Network_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Network_NetworkAction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LeaderElection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaderElection_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LeaderElection_ElectAction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VotingBallot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VotingBallot_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VotingBallot_BallotType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VotingCast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VotingCast_reflection_ = NULL;
const ::google::protobuf::Descriptor* VotingStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VotingStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VotingStatus_VoteStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MgmtHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MgmtHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Management_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Management_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PokeStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_comm_2eproto() {
  protobuf_AddDesc_comm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "comm.proto");
  GOOGLE_CHECK(file != NULL);
  NameValueSet_descriptor_ = file->message_type(0);
  static const int NameValueSet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValueSet, node_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValueSet, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValueSet, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValueSet, node_),
  };
  NameValueSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameValueSet_descriptor_,
      NameValueSet::default_instance_,
      NameValueSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValueSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameValueSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameValueSet));
  NameValueSet_NodeType_descriptor_ = NameValueSet_descriptor_->enum_type(0);
  NameSpace_descriptor_ = file->message_type(1);
  static const int NameSpace_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, ns_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, last_modified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, properties_),
  };
  NameSpace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameSpace_descriptor_,
      NameSpace::default_instance_,
      NameSpace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameSpace));
  JobDesc_descriptor_ = file->message_type(2);
  static const int JobDesc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDesc, name_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDesc, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDesc, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDesc, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDesc, options_),
  };
  JobDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobDesc_descriptor_,
      JobDesc::default_instance_,
      JobDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobDesc));
  JobDesc_JobCode_descriptor_ = JobDesc_descriptor_->enum_type(0);
  Ping_descriptor_ = file->message_type(3);
  static const int Ping_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, tag_),
  };
  Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ping_descriptor_,
      Ping::default_instance_,
      Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ping));
  NameSpaceOperation_descriptor_ = file->message_type(4);
  static const int NameSpaceOperation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpaceOperation, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpaceOperation, ns_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpaceOperation, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpaceOperation, options_),
  };
  NameSpaceOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameSpaceOperation_descriptor_,
      NameSpaceOperation::default_instance_,
      NameSpaceOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpaceOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpaceOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameSpaceOperation));
  NameSpaceOperation_SpaceAction_descriptor_ = NameSpaceOperation_descriptor_->enum_type(0);
  NameSpaceStatus_descriptor_ = file->message_type(5);
  static const int NameSpaceStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpaceStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpaceStatus, data_),
  };
  NameSpaceStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameSpaceStatus_descriptor_,
      NameSpaceStatus::default_instance_,
      NameSpaceStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpaceStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameSpaceStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameSpaceStatus));
  JobOperation_descriptor_ = file->message_type(6);
  static const int JobOperation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOperation, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOperation, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOperation, data_),
  };
  JobOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobOperation_descriptor_,
      JobOperation::default_instance_,
      JobOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobOperation));
  JobOperation_JobAction_descriptor_ = JobOperation_descriptor_->enum_type(0);
  JobProposal_descriptor_ = file->message_type(7);
  static const int JobProposal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobProposal, name_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobProposal, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobProposal, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobProposal, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobProposal, options_),
  };
  JobProposal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobProposal_descriptor_,
      JobProposal::default_instance_,
      JobProposal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobProposal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobProposal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobProposal));
  JobBid_descriptor_ = file->message_type(8);
  static const int JobBid_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobBid, name_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobBid, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobBid, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobBid, bid_),
  };
  JobBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobBid_descriptor_,
      JobBid::default_instance_,
      JobBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobBid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobBid));
  JobStatus_descriptor_ = file->message_type(9);
  static const int JobStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, job_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, data_),
  };
  JobStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobStatus_descriptor_,
      JobStatus::default_instance_,
      JobStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobStatus));
  RoutingPath_descriptor_ = file->message_type(10);
  static const int RoutingPath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingPath, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingPath, time_),
  };
  RoutingPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoutingPath_descriptor_,
      RoutingPath::default_instance_,
      RoutingPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoutingPath));
  Header_descriptor_ = file->message_type(11);
  static const int Header_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, routing_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, originator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, reply_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, reply_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, tonode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, options_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  Header_Routing_descriptor_ = Header_descriptor_->enum_type(0);
  Payload_descriptor_ = file->message_type(12);
  static const int Payload_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, space_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, job_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, job_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, space_status_),
  };
  Payload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Payload_descriptor_,
      Payload::default_instance_,
      Payload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Payload));
  Request_descriptor_ = file->message_type(13);
  static const int Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, body_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Heartbeat_descriptor_ = file->message_type(14);
  static const int Heartbeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, time_ref_),
  };
  Heartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Heartbeat_descriptor_,
      Heartbeat::default_instance_,
      Heartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Heartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Heartbeat));
  Network_descriptor_ = file->message_type(15);
  static const int Network_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, from_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, to_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, action_),
  };
  Network_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Network_descriptor_,
      Network::default_instance_,
      Network_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Network));
  Network_NetworkAction_descriptor_ = Network_descriptor_->enum_type(0);
  LeaderElection_descriptor_ = file->message_type(16);
  static const int LeaderElection_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderElection, elect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderElection, candidate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderElection, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderElection, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderElection, expires_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderElection, hops_),
  };
  LeaderElection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaderElection_descriptor_,
      LeaderElection::default_instance_,
      LeaderElection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderElection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderElection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaderElection));
  LeaderElection_ElectAction_descriptor_ = LeaderElection_descriptor_->enum_type(0);
  VotingBallot_descriptor_ = file->message_type(17);
  static const int VotingBallot_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingBallot, ballot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingBallot, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingBallot, ballot_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingBallot, expires_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingBallot, margin_to_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingBallot, max_hops_),
  };
  VotingBallot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VotingBallot_descriptor_,
      VotingBallot::default_instance_,
      VotingBallot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingBallot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingBallot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VotingBallot));
  VotingBallot_BallotType_descriptor_ = VotingBallot_descriptor_->enum_type(0);
  VotingCast_descriptor_ = file->message_type(18);
  static const int VotingCast_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingCast, voter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingCast, ballot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingCast, candidate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingCast, rank_),
  };
  VotingCast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VotingCast_descriptor_,
      VotingCast::default_instance_,
      VotingCast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingCast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingCast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VotingCast));
  VotingStatus_descriptor_ = file->message_type(19);
  static const int VotingStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingStatus, ballot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingStatus, winner_),
  };
  VotingStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VotingStatus_descriptor_,
      VotingStatus::default_instance_,
      VotingStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VotingStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VotingStatus));
  VotingStatus_VoteStatus_descriptor_ = VotingStatus_descriptor_->enum_type(0);
  MgmtHeader_descriptor_ = file->message_type(20);
  static const int MgmtHeader_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MgmtHeader, originator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MgmtHeader, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MgmtHeader, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MgmtHeader, tonode_),
  };
  MgmtHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MgmtHeader_descriptor_,
      MgmtHeader::default_instance_,
      MgmtHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MgmtHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MgmtHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MgmtHeader));
  Management_descriptor_ = file->message_type(21);
  static const int Management_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Management, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Management, graph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Management, beat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Management, election_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Management, job_propose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Management, job_bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Management, vote_declare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Management, vote_cast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Management, vote_status_),
  };
  Management_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Management_descriptor_,
      Management::default_instance_,
      Management_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Management, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Management, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Management));
  PokeStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_comm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameValueSet_descriptor_, &NameValueSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameSpace_descriptor_, &NameSpace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobDesc_descriptor_, &JobDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ping_descriptor_, &Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameSpaceOperation_descriptor_, &NameSpaceOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameSpaceStatus_descriptor_, &NameSpaceStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobOperation_descriptor_, &JobOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobProposal_descriptor_, &JobProposal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobBid_descriptor_, &JobBid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobStatus_descriptor_, &JobStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoutingPath_descriptor_, &RoutingPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Payload_descriptor_, &Payload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Heartbeat_descriptor_, &Heartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Network_descriptor_, &Network::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaderElection_descriptor_, &LeaderElection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VotingBallot_descriptor_, &VotingBallot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VotingCast_descriptor_, &VotingCast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VotingStatus_descriptor_, &VotingStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MgmtHeader_descriptor_, &MgmtHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Management_descriptor_, &Management::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_comm_2eproto() {
  delete NameValueSet::default_instance_;
  delete NameValueSet_reflection_;
  delete NameSpace::default_instance_;
  delete NameSpace_reflection_;
  delete JobDesc::default_instance_;
  delete JobDesc_reflection_;
  delete Ping::default_instance_;
  delete Ping_reflection_;
  delete NameSpaceOperation::default_instance_;
  delete NameSpaceOperation_reflection_;
  delete NameSpaceStatus::default_instance_;
  delete NameSpaceStatus_reflection_;
  delete JobOperation::default_instance_;
  delete JobOperation_reflection_;
  delete JobProposal::default_instance_;
  delete JobProposal_reflection_;
  delete JobBid::default_instance_;
  delete JobBid_reflection_;
  delete JobStatus::default_instance_;
  delete JobStatus_reflection_;
  delete RoutingPath::default_instance_;
  delete RoutingPath_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete Payload::default_instance_;
  delete Payload_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Heartbeat::default_instance_;
  delete Heartbeat_reflection_;
  delete Network::default_instance_;
  delete Network_reflection_;
  delete LeaderElection::default_instance_;
  delete LeaderElection_reflection_;
  delete VotingBallot::default_instance_;
  delete VotingBallot_reflection_;
  delete VotingCast::default_instance_;
  delete VotingCast_reflection_;
  delete VotingStatus::default_instance_;
  delete VotingStatus_reflection_;
  delete MgmtHeader::default_instance_;
  delete MgmtHeader_reflection_;
  delete Management::default_instance_;
  delete Management_reflection_;
}

void protobuf_AddDesc_comm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncomm.proto\"\224\001\n\014NameValueSet\022)\n\tnode_ty"
    "pe\030\001 \002(\0162\026.NameValueSet.NodeType\022\014\n\004name"
    "\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022\033\n\004node\030\004 \003(\0132\r.Na"
    "meValueSet\"\037\n\010NodeType\022\010\n\004NODE\020\001\022\t\n\005VALU"
    "E\020\002\"\224\001\n\tNameSpace\022\021\n\005ns_id\030\002 \002(\003:\002-1\022\014\n\004"
    "name\030\003 \001(\t\022\014\n\004desc\030\004 \001(\t\022\017\n\007created\030\005 \001("
    "\003\022\025\n\rlast_modified\030\006 \001(\003\022\r\n\005owner\030\007 \001(\t\022"
    "!\n\nproperties\030\010 \001(\0132\r.NameValueSet\"\352\001\n\007J"
    "obDesc\022\022\n\nname_space\030\001 \002(\t\022\020\n\010owner_id\030\002"
    " \002(\003\022\016\n\006job_id\030\003 \002(\t\022 \n\006status\030\004 \002(\0162\020.J"
    "obDesc.JobCode\022\036\n\007options\030\005 \001(\0132\r.NameVa"
    "lueSet\"g\n\007JobCode\022\016\n\nJOBUNKNOWN\020\001\022\017\n\013JOB"
    "RECEIVED\020\002\022\r\n\tJOBQUEUED\020\003\022\016\n\nJOBRUNNING\020"
    "\004\022\r\n\tJOBKILLED\020d\022\r\n\tJOBFAILED\020e\"#\n\004Ping\022"
    "\016\n\006number\030\001 \002(\005\022\013\n\003tag\030\002 \002(\t\"\341\001\n\022NameSpa"
    "ceOperation\022/\n\006action\030\001 \002(\0162\037.NameSpaceO"
    "peration.SpaceAction\022\021\n\005ns_id\030\002 \001(\003:\002-1\022"
    "\030\n\004data\030\003 \001(\0132\n.NameSpace\022\036\n\007options\030\004 \001"
    "(\0132\r.NameValueSet\"M\n\013SpaceAction\022\014\n\010ADDS"
    "PACE\020\001\022\017\n\013UPDATESPACE\020\002\022\017\n\013REMOVESPACE\020\003"
    "\022\016\n\nLISTSPACES\020\004\"H\n\017NameSpaceStatus\022\033\n\006s"
    "tatus\030\001 \002(\0162\013.PokeStatus\022\030\n\004data\030\002 \003(\0132\n"
    ".NameSpace\"\242\001\n\014JobOperation\022\'\n\006action\030\001 "
    "\002(\0162\027.JobOperation.JobAction\022\016\n\006job_id\030\002"
    " \001(\t\022\026\n\004data\030\003 \001(\0132\010.JobDesc\"A\n\tJobActio"
    "n\022\n\n\006ADDJOB\020\001\022\013\n\007STOPJOB\020\002\022\r\n\tREMOVEJOB\020"
    "\003\022\014\n\010LISTJOBS\020\004\"s\n\013JobProposal\022\022\n\nname_s"
    "pace\030\001 \002(\t\022\020\n\010owner_id\030\002 \002(\003\022\016\n\006job_id\030\003"
    " \002(\t\022\016\n\006weight\030\004 \002(\005\022\036\n\007options\030\005 \001(\0132\r."
    "NameValueSet\"K\n\006JobBid\022\022\n\nname_space\030\001 \002"
    "(\t\022\020\n\010owner_id\030\002 \002(\003\022\016\n\006job_id\030\003 \002(\t\022\013\n\003"
    "bid\030\004 \002(\005\"u\n\tJobStatus\022\016\n\006job_id\030\001 \002(\t\022\033"
    "\n\006status\030\002 \002(\0162\013.PokeStatus\022#\n\tjob_state"
    "\030\003 \002(\0162\020.JobDesc.JobCode\022\026\n\004data\030\004 \003(\0132\010"
    ".JobDesc\",\n\013RoutingPath\022\017\n\007node_id\030\001 \002(\005"
    "\022\014\n\004time\030\002 \002(\003\"\244\002\n\006Header\022#\n\nrouting_id\030"
    "\001 \002(\0162\017.Header.Routing\022\022\n\noriginator\030\002 \002"
    "(\005\022\013\n\003tag\030\003 \001(\t\022\014\n\004time\030\004 \001(\003\022\037\n\nreply_c"
    "ode\030\005 \001(\0162\013.PokeStatus\022\021\n\treply_msg\030\006 \001("
    "\t\022\032\n\004path\030\007 \003(\0132\014.RoutingPath\022\016\n\006toNode\030"
    "\010 \001(\005\022\036\n\007options\030\t \003(\0132\r.NameValueSet\"F\n"
    "\007Routing\022\010\n\004PING\020\002\022\016\n\nNAMESPACES\020\003\022\010\n\004JO"
    "BS\020\004\022\013\n\007REPORTS\020\n\022\n\n\006MANAGE\020d\"\254\001\n\007Payloa"
    "d\022\023\n\004ping\030\001 \001(\0132\005.Ping\022%\n\010space_op\030\002 \001(\013"
    "2\023.NameSpaceOperation\022\035\n\006job_op\030\003 \001(\0132\r."
    "JobOperation\022\036\n\njob_status\030\r \001(\0132\n.JobSt"
    "atus\022&\n\014space_status\030\014 \001(\0132\020.NameSpaceSt"
    "atus\":\n\007Request\022\027\n\006header\030\001 \002(\0132\007.Header"
    "\022\026\n\004body\030\002 \002(\0132\010.Payload\"\035\n\tHeartbeat\022\020\n"
    "\010time_ref\030\002 \002(\003\"\303\001\n\007Network\022\024\n\014from_node"
    "_id\030\001 \002(\005\022\022\n\nto_node_id\030\002 \002(\005\022&\n\006action\030"
    "\003 \002(\0162\026.Network.NetworkAction\"f\n\rNetwork"
    "Action\022\014\n\010NODEJOIN\020\001\022\r\n\tNODELEAVE\020\002\022\014\n\010N"
    "ODEDEAD\020\003\022\r\n\tCREATEMAP\0207\022\014\n\010ANNOUNCE\0208\022\r"
    "\n\010SHUTDOWN\020\347\007\"\243\002\n\016LeaderElection\022\020\n\010elec"
    "t_id\030\002 \002(\t\022\024\n\014candidate_id\030\003 \002(\005\022\014\n\004desc"
    "\030\004 \001(\t\022+\n\006action\030\005 \002(\0162\033.LeaderElection."
    "ElectAction\022\023\n\007expires\030\006 \001(\003:\002-1\022\020\n\004hops"
    "\030\007 \001(\005:\002-1\"\206\001\n\013ElectAction\022\023\n\017DECLAREELE"
    "CTION\020\001\022\014\n\010NOMINATE\020\002\022\013\n\007ABSTAIN\020\003\022\021\n\rDE"
    "CLAREWINNER\020\004\022\017\n\013DECLAREVOID\020\005\022\022\n\016WHOIST"
    "HELEADER\020\006\022\017\n\013THELEADERIS\020\007\"\200\002\n\014VotingBa"
    "llot\022\021\n\tballot_id\030\001 \002(\t\022\014\n\004desc\030\002 \002(\t\022/\n"
    "\rballot_format\030\003 \002(\0162\030.VotingBallot.Ball"
    "otType\022\023\n\013expires_sec\030\006 \001(\003\022\025\n\rmargin_to"
    "_win\030\007 \001(\005\022\024\n\010max_hops\030\010 \001(\005:\002-1\"\\\n\nBall"
    "otType\022\022\n\016SIMPLEMAJORITY\020\001\022\033\n\027TIMECONSTR"
    "AINEDMAJORITY\020\002\022\n\n\006RANKED\020\003\022\021\n\rINSTANTRU"
    "NOFF\020\004\"O\n\nVotingCast\022\r\n\005voter\030\001 \002(\t\022\021\n\tb"
    "allot_id\030\002 \002(\t\022\021\n\tcandidate\030\n \001(\005\022\014\n\004ran"
    "k\030\013 \001(\005\"\220\001\n\014VotingStatus\022\021\n\tballot_id\030\001 "
    "\002(\t\022(\n\006status\030\002 \002(\0162\030.VotingStatus.VoteS"
    "tatus\022\016\n\006winner\030\003 \001(\005\"3\n\nVoteStatus\022\023\n\017B"
    "ALLOTABANDONED\020\001\022\020\n\014BALLOTWINNER\020\002\"Z\n\nMg"
    "mtHeader\022\022\n\noriginator\030\002 \002(\005\022\014\n\004time\030\004 \001"
    "(\003\022\032\n\004path\030\007 \003(\0132\014.RoutingPath\022\016\n\006toNode"
    "\030\010 \001(\005\"\245\002\n\nManagement\022\033\n\006header\030\001 \002(\0132\013."
    "MgmtHeader\022\027\n\005graph\030\002 \001(\0132\010.Network\022\030\n\004b"
    "eat\030\003 \001(\0132\n.Heartbeat\022!\n\010election\030\004 \001(\0132"
    "\017.LeaderElection\022!\n\013job_propose\030\005 \001(\0132\014."
    "JobProposal\022\030\n\007job_bid\030\006 \001(\0132\007.JobBid\022#\n"
    "\014vote_declare\030\007 \001(\0132\r.VotingBallot\022\036\n\tvo"
    "te_cast\030\010 \001(\0132\013.VotingCast\022\"\n\013vote_statu"
    "s\030\t \001(\0132\r.VotingStatus*\221\001\n\nPokeStatus\022\n\n"
    "\006UKNOWN\020\001\022\013\n\007SUCCESS\020\002\022\013\n\007NOFOUND\020d\022\020\n\014N"
    "OINCOMPLETE\020e\022\n\n\006NOAUTH\020f\022\020\n\014NOCONNECTIO"
    "N\020g\022\017\n\013NOREACHABLE\020h\022\016\n\nNORESOURCE\020i\022\014\n\007"
    "FAILURE\020\307\001B\007\n\003eyeH\001", 3499);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "comm.proto", &protobuf_RegisterTypes);
  NameValueSet::default_instance_ = new NameValueSet();
  NameSpace::default_instance_ = new NameSpace();
  JobDesc::default_instance_ = new JobDesc();
  Ping::default_instance_ = new Ping();
  NameSpaceOperation::default_instance_ = new NameSpaceOperation();
  NameSpaceStatus::default_instance_ = new NameSpaceStatus();
  JobOperation::default_instance_ = new JobOperation();
  JobProposal::default_instance_ = new JobProposal();
  JobBid::default_instance_ = new JobBid();
  JobStatus::default_instance_ = new JobStatus();
  RoutingPath::default_instance_ = new RoutingPath();
  Header::default_instance_ = new Header();
  Payload::default_instance_ = new Payload();
  Request::default_instance_ = new Request();
  Heartbeat::default_instance_ = new Heartbeat();
  Network::default_instance_ = new Network();
  LeaderElection::default_instance_ = new LeaderElection();
  VotingBallot::default_instance_ = new VotingBallot();
  VotingCast::default_instance_ = new VotingCast();
  VotingStatus::default_instance_ = new VotingStatus();
  MgmtHeader::default_instance_ = new MgmtHeader();
  Management::default_instance_ = new Management();
  NameValueSet::default_instance_->InitAsDefaultInstance();
  NameSpace::default_instance_->InitAsDefaultInstance();
  JobDesc::default_instance_->InitAsDefaultInstance();
  Ping::default_instance_->InitAsDefaultInstance();
  NameSpaceOperation::default_instance_->InitAsDefaultInstance();
  NameSpaceStatus::default_instance_->InitAsDefaultInstance();
  JobOperation::default_instance_->InitAsDefaultInstance();
  JobProposal::default_instance_->InitAsDefaultInstance();
  JobBid::default_instance_->InitAsDefaultInstance();
  JobStatus::default_instance_->InitAsDefaultInstance();
  RoutingPath::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  Payload::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Heartbeat::default_instance_->InitAsDefaultInstance();
  Network::default_instance_->InitAsDefaultInstance();
  LeaderElection::default_instance_->InitAsDefaultInstance();
  VotingBallot::default_instance_->InitAsDefaultInstance();
  VotingCast::default_instance_->InitAsDefaultInstance();
  VotingStatus::default_instance_->InitAsDefaultInstance();
  MgmtHeader::default_instance_->InitAsDefaultInstance();
  Management::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_comm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_comm_2eproto {
  StaticDescriptorInitializer_comm_2eproto() {
    protobuf_AddDesc_comm_2eproto();
  }
} static_descriptor_initializer_comm_2eproto_;
const ::google::protobuf::EnumDescriptor* PokeStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokeStatus_descriptor_;
}
bool PokeStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 199:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NameValueSet_NodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameValueSet_NodeType_descriptor_;
}
bool NameValueSet_NodeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NameValueSet_NodeType NameValueSet::NODE;
const NameValueSet_NodeType NameValueSet::VALUE;
const NameValueSet_NodeType NameValueSet::NodeType_MIN;
const NameValueSet_NodeType NameValueSet::NodeType_MAX;
const int NameValueSet::NodeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NameValueSet::kNodeTypeFieldNumber;
const int NameValueSet::kNameFieldNumber;
const int NameValueSet::kValueFieldNumber;
const int NameValueSet::kNodeFieldNumber;
#endif  // !_MSC_VER

NameValueSet::NameValueSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NameValueSet)
}

void NameValueSet::InitAsDefaultInstance() {
}

NameValueSet::NameValueSet(const NameValueSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NameValueSet)
}

void NameValueSet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameValueSet::~NameValueSet() {
  // @@protoc_insertion_point(destructor:NameValueSet)
  SharedDtor();
}

void NameValueSet::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void NameValueSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameValueSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameValueSet_descriptor_;
}

const NameValueSet& NameValueSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

NameValueSet* NameValueSet::default_instance_ = NULL;

NameValueSet* NameValueSet::New() const {
  return new NameValueSet;
}

void NameValueSet::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    node_type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameValueSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NameValueSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NameValueSet.NodeType node_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NameValueSet_NodeType_IsValid(value)) {
            set_node_type(static_cast< ::NameValueSet_NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_node;
        break;
      }

      // repeated .NameValueSet node = 4;
      case 4: {
        if (tag == 34) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_node;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NameValueSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NameValueSet)
  return false;
#undef DO_
}

void NameValueSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NameValueSet)
  // required .NameValueSet.NodeType node_type = 1;
  if (has_node_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->node_type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // repeated .NameValueSet node = 4;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NameValueSet)
}

::google::protobuf::uint8* NameValueSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NameValueSet)
  // required .NameValueSet.NodeType node_type = 1;
  if (has_node_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->node_type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // repeated .NameValueSet node = 4;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NameValueSet)
  return target;
}

int NameValueSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NameValueSet.NodeType node_type = 1;
    if (has_node_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  // repeated .NameValueSet node = 4;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameValueSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameValueSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameValueSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameValueSet::MergeFrom(const NameValueSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_type()) {
      set_node_type(from.node_type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameValueSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameValueSet::CopyFrom(const NameValueSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameValueSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->node())) return false;
  return true;
}

void NameValueSet::Swap(NameValueSet* other) {
  if (other != this) {
    std::swap(node_type_, other->node_type_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameValueSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameValueSet_descriptor_;
  metadata.reflection = NameValueSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameSpace::kNsIdFieldNumber;
const int NameSpace::kNameFieldNumber;
const int NameSpace::kDescFieldNumber;
const int NameSpace::kCreatedFieldNumber;
const int NameSpace::kLastModifiedFieldNumber;
const int NameSpace::kOwnerFieldNumber;
const int NameSpace::kPropertiesFieldNumber;
#endif  // !_MSC_VER

NameSpace::NameSpace()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NameSpace)
}

void NameSpace::InitAsDefaultInstance() {
  properties_ = const_cast< ::NameValueSet*>(&::NameValueSet::default_instance());
}

NameSpace::NameSpace(const NameSpace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NameSpace)
}

void NameSpace::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ns_id_ = GOOGLE_LONGLONG(-1);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_ = GOOGLE_LONGLONG(0);
  last_modified_ = GOOGLE_LONGLONG(0);
  owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameSpace::~NameSpace() {
  // @@protoc_insertion_point(destructor:NameSpace)
  SharedDtor();
}

void NameSpace::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (owner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete owner_;
  }
  if (this != default_instance_) {
    delete properties_;
  }
}

void NameSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameSpace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameSpace_descriptor_;
}

const NameSpace& NameSpace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

NameSpace* NameSpace::default_instance_ = NULL;

NameSpace* NameSpace::New() const {
  return new NameSpace;
}

void NameSpace::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NameSpace*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(created_, last_modified_);
    ns_id_ = GOOGLE_LONGLONG(-1);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    if (has_owner()) {
      if (owner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        owner_->clear();
      }
    }
    if (has_properties()) {
      if (properties_ != NULL) properties_->::NameValueSet::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NameSpace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ns_id = 2 [default = -1];
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ns_id_)));
          set_has_ns_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }

      // optional string desc = 4;
      case 4: {
        if (tag == 34) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_created;
        break;
      }

      // optional int64 created = 5;
      case 5: {
        if (tag == 40) {
         parse_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_)));
          set_has_created();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_last_modified;
        break;
      }

      // optional int64 last_modified = 6;
      case 6: {
        if (tag == 48) {
         parse_last_modified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_modified_)));
          set_has_last_modified();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_owner;
        break;
      }

      // optional string owner = 7;
      case 7: {
        if (tag == 58) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->owner().data(), this->owner().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "owner");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_properties;
        break;
      }

      // optional .NameValueSet properties = 8;
      case 8: {
        if (tag == 66) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NameSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NameSpace)
  return false;
#undef DO_
}

void NameSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NameSpace)
  // required int64 ns_id = 2 [default = -1];
  if (has_ns_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ns_id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->desc(), output);
  }

  // optional int64 created = 5;
  if (has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->created(), output);
  }

  // optional int64 last_modified = 6;
  if (has_last_modified()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->last_modified(), output);
  }

  // optional string owner = 7;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "owner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->owner(), output);
  }

  // optional .NameValueSet properties = 8;
  if (has_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->properties(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NameSpace)
}

::google::protobuf::uint8* NameSpace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NameSpace)
  // required int64 ns_id = 2 [default = -1];
  if (has_ns_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ns_id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  // optional int64 created = 5;
  if (has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->created(), target);
  }

  // optional int64 last_modified = 6;
  if (has_last_modified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->last_modified(), target);
  }

  // optional string owner = 7;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "owner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->owner(), target);
  }

  // optional .NameValueSet properties = 8;
  if (has_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->properties(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NameSpace)
  return target;
}

int NameSpace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ns_id = 2 [default = -1];
    if (has_ns_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ns_id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional int64 created = 5;
    if (has_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->created());
    }

    // optional int64 last_modified = 6;
    if (has_last_modified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_modified());
    }

    // optional string owner = 7;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner());
    }

    // optional .NameValueSet properties = 8;
    if (has_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->properties());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameSpace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameSpace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameSpace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameSpace::MergeFrom(const NameSpace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ns_id()) {
      set_ns_id(from.ns_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_created()) {
      set_created(from.created());
    }
    if (from.has_last_modified()) {
      set_last_modified(from.last_modified());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_properties()) {
      mutable_properties()->::NameValueSet::MergeFrom(from.properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameSpace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameSpace::CopyFrom(const NameSpace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameSpace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_properties()) {
    if (!this->properties().IsInitialized()) return false;
  }
  return true;
}

void NameSpace::Swap(NameSpace* other) {
  if (other != this) {
    std::swap(ns_id_, other->ns_id_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(created_, other->created_);
    std::swap(last_modified_, other->last_modified_);
    std::swap(owner_, other->owner_);
    std::swap(properties_, other->properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameSpace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameSpace_descriptor_;
  metadata.reflection = NameSpace_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* JobDesc_JobCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobDesc_JobCode_descriptor_;
}
bool JobDesc_JobCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const JobDesc_JobCode JobDesc::JOBUNKNOWN;
const JobDesc_JobCode JobDesc::JOBRECEIVED;
const JobDesc_JobCode JobDesc::JOBQUEUED;
const JobDesc_JobCode JobDesc::JOBRUNNING;
const JobDesc_JobCode JobDesc::JOBKILLED;
const JobDesc_JobCode JobDesc::JOBFAILED;
const JobDesc_JobCode JobDesc::JobCode_MIN;
const JobDesc_JobCode JobDesc::JobCode_MAX;
const int JobDesc::JobCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int JobDesc::kNameSpaceFieldNumber;
const int JobDesc::kOwnerIdFieldNumber;
const int JobDesc::kJobIdFieldNumber;
const int JobDesc::kStatusFieldNumber;
const int JobDesc::kOptionsFieldNumber;
#endif  // !_MSC_VER

JobDesc::JobDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobDesc)
}

void JobDesc::InitAsDefaultInstance() {
  options_ = const_cast< ::NameValueSet*>(&::NameValueSet::default_instance());
}

JobDesc::JobDesc(const JobDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JobDesc)
}

void JobDesc::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_space_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_id_ = GOOGLE_LONGLONG(0);
  job_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 1;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobDesc::~JobDesc() {
  // @@protoc_insertion_point(destructor:JobDesc)
  SharedDtor();
}

void JobDesc::SharedDtor() {
  if (name_space_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_space_;
  }
  if (job_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete job_id_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void JobDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobDesc_descriptor_;
}

const JobDesc& JobDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

JobDesc* JobDesc::default_instance_ = NULL;

JobDesc* JobDesc::New() const {
  return new JobDesc;
}

void JobDesc::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_name_space()) {
      if (name_space_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_space_->clear();
      }
    }
    owner_id_ = GOOGLE_LONGLONG(0);
    if (has_job_id()) {
      if (job_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        job_id_->clear();
      }
    }
    status_ = 1;
    if (has_options()) {
      if (options_ != NULL) options_->::NameValueSet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JobDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name_space = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_space()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name_space().data(), this->name_space().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name_space");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner_id;
        break;
      }

      // required int64 owner_id = 2;
      case 2: {
        if (tag == 16) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_job_id;
        break;
      }

      // required string job_id = 3;
      case 3: {
        if (tag == 26) {
         parse_job_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->job_id().data(), this->job_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "job_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required .JobDesc.JobCode status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::JobDesc_JobCode_IsValid(value)) {
            set_status(static_cast< ::JobDesc_JobCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_options;
        break;
      }

      // optional .NameValueSet options = 5;
      case 5: {
        if (tag == 42) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JobDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JobDesc)
  return false;
#undef DO_
}

void JobDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JobDesc)
  // required string name_space = 1;
  if (has_name_space()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_space().data(), this->name_space().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name_space");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name_space(), output);
  }

  // required int64 owner_id = 2;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->owner_id(), output);
  }

  // required string job_id = 3;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "job_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->job_id(), output);
  }

  // required .JobDesc.JobCode status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional .NameValueSet options = 5;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JobDesc)
}

::google::protobuf::uint8* JobDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobDesc)
  // required string name_space = 1;
  if (has_name_space()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_space().data(), this->name_space().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name_space");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name_space(), target);
  }

  // required int64 owner_id = 2;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->owner_id(), target);
  }

  // required string job_id = 3;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "job_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->job_id(), target);
  }

  // required .JobDesc.JobCode status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional .NameValueSet options = 5;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JobDesc)
  return target;
}

int JobDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name_space = 1;
    if (has_name_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_space());
    }

    // required int64 owner_id = 2;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->owner_id());
    }

    // required string job_id = 3;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->job_id());
    }

    // required .JobDesc.JobCode status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .NameValueSet options = 5;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobDesc::MergeFrom(const JobDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name_space()) {
      set_name_space(from.name_space());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_options()) {
      mutable_options()->::NameValueSet::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobDesc::CopyFrom(const JobDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_options()) {
    if (!this->options().IsInitialized()) return false;
  }
  return true;
}

void JobDesc::Swap(JobDesc* other) {
  if (other != this) {
    std::swap(name_space_, other->name_space_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(job_id_, other->job_id_);
    std::swap(status_, other->status_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobDesc_descriptor_;
  metadata.reflection = JobDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ping::kNumberFieldNumber;
const int Ping::kTagFieldNumber;
#endif  // !_MSC_VER

Ping::Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ping)
}

void Ping::InitAsDefaultInstance() {
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Ping)
}

void Ping::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  number_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ping_descriptor_;
}

const Ping& Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

Ping* Ping::default_instance_ = NULL;

Ping* Ping::New() const {
  return new Ping;
}

void Ping::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    number_ = 0;
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag;
        break;
      }

      // required string tag = 2;
      case 2: {
        if (tag == 18) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ping)
  return false;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ping)
  // required int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // required string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Ping)
}

::google::protobuf::uint8* Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ping)
  // required int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  // required string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ping)
  return target;
}

int Ping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // required string tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Ping::Swap(Ping* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ping_descriptor_;
  metadata.reflection = Ping_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NameSpaceOperation_SpaceAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameSpaceOperation_SpaceAction_descriptor_;
}
bool NameSpaceOperation_SpaceAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NameSpaceOperation_SpaceAction NameSpaceOperation::ADDSPACE;
const NameSpaceOperation_SpaceAction NameSpaceOperation::UPDATESPACE;
const NameSpaceOperation_SpaceAction NameSpaceOperation::REMOVESPACE;
const NameSpaceOperation_SpaceAction NameSpaceOperation::LISTSPACES;
const NameSpaceOperation_SpaceAction NameSpaceOperation::SpaceAction_MIN;
const NameSpaceOperation_SpaceAction NameSpaceOperation::SpaceAction_MAX;
const int NameSpaceOperation::SpaceAction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NameSpaceOperation::kActionFieldNumber;
const int NameSpaceOperation::kNsIdFieldNumber;
const int NameSpaceOperation::kDataFieldNumber;
const int NameSpaceOperation::kOptionsFieldNumber;
#endif  // !_MSC_VER

NameSpaceOperation::NameSpaceOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NameSpaceOperation)
}

void NameSpaceOperation::InitAsDefaultInstance() {
  data_ = const_cast< ::NameSpace*>(&::NameSpace::default_instance());
  options_ = const_cast< ::NameValueSet*>(&::NameValueSet::default_instance());
}

NameSpaceOperation::NameSpaceOperation(const NameSpaceOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NameSpaceOperation)
}

void NameSpaceOperation::SharedCtor() {
  _cached_size_ = 0;
  action_ = 1;
  ns_id_ = GOOGLE_LONGLONG(-1);
  data_ = NULL;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameSpaceOperation::~NameSpaceOperation() {
  // @@protoc_insertion_point(destructor:NameSpaceOperation)
  SharedDtor();
}

void NameSpaceOperation::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete options_;
  }
}

void NameSpaceOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameSpaceOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameSpaceOperation_descriptor_;
}

const NameSpaceOperation& NameSpaceOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

NameSpaceOperation* NameSpaceOperation::default_instance_ = NULL;

NameSpaceOperation* NameSpaceOperation::New() const {
  return new NameSpaceOperation;
}

void NameSpaceOperation::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    action_ = 1;
    ns_id_ = GOOGLE_LONGLONG(-1);
    if (has_data()) {
      if (data_ != NULL) data_->::NameSpace::Clear();
    }
    if (has_options()) {
      if (options_ != NULL) options_->::NameValueSet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameSpaceOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NameSpaceOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NameSpaceOperation.SpaceAction action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NameSpaceOperation_SpaceAction_IsValid(value)) {
            set_action(static_cast< ::NameSpaceOperation_SpaceAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ns_id;
        break;
      }

      // optional int64 ns_id = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_ns_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ns_id_)));
          set_has_ns_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .NameSpace data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_options;
        break;
      }

      // optional .NameValueSet options = 4;
      case 4: {
        if (tag == 34) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NameSpaceOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NameSpaceOperation)
  return false;
#undef DO_
}

void NameSpaceOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NameSpaceOperation)
  // required .NameSpaceOperation.SpaceAction action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional int64 ns_id = 2 [default = -1];
  if (has_ns_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ns_id(), output);
  }

  // optional .NameSpace data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  // optional .NameValueSet options = 4;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NameSpaceOperation)
}

::google::protobuf::uint8* NameSpaceOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NameSpaceOperation)
  // required .NameSpaceOperation.SpaceAction action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional int64 ns_id = 2 [default = -1];
  if (has_ns_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ns_id(), target);
  }

  // optional .NameSpace data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  // optional .NameValueSet options = 4;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NameSpaceOperation)
  return target;
}

int NameSpaceOperation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NameSpaceOperation.SpaceAction action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional int64 ns_id = 2 [default = -1];
    if (has_ns_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ns_id());
    }

    // optional .NameSpace data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .NameValueSet options = 4;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameSpaceOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameSpaceOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameSpaceOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameSpaceOperation::MergeFrom(const NameSpaceOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_ns_id()) {
      set_ns_id(from.ns_id());
    }
    if (from.has_data()) {
      mutable_data()->::NameSpace::MergeFrom(from.data());
    }
    if (from.has_options()) {
      mutable_options()->::NameValueSet::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameSpaceOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameSpaceOperation::CopyFrom(const NameSpaceOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameSpaceOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  if (has_options()) {
    if (!this->options().IsInitialized()) return false;
  }
  return true;
}

void NameSpaceOperation::Swap(NameSpaceOperation* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(ns_id_, other->ns_id_);
    std::swap(data_, other->data_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameSpaceOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameSpaceOperation_descriptor_;
  metadata.reflection = NameSpaceOperation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameSpaceStatus::kStatusFieldNumber;
const int NameSpaceStatus::kDataFieldNumber;
#endif  // !_MSC_VER

NameSpaceStatus::NameSpaceStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NameSpaceStatus)
}

void NameSpaceStatus::InitAsDefaultInstance() {
}

NameSpaceStatus::NameSpaceStatus(const NameSpaceStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NameSpaceStatus)
}

void NameSpaceStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameSpaceStatus::~NameSpaceStatus() {
  // @@protoc_insertion_point(destructor:NameSpaceStatus)
  SharedDtor();
}

void NameSpaceStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NameSpaceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameSpaceStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameSpaceStatus_descriptor_;
}

const NameSpaceStatus& NameSpaceStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

NameSpaceStatus* NameSpaceStatus::default_instance_ = NULL;

NameSpaceStatus* NameSpaceStatus::New() const {
  return new NameSpaceStatus;
}

void NameSpaceStatus::Clear() {
  status_ = 1;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameSpaceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NameSpaceStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PokeStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PokeStatus_IsValid(value)) {
            set_status(static_cast< ::PokeStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .NameSpace data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NameSpaceStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NameSpaceStatus)
  return false;
#undef DO_
}

void NameSpaceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NameSpaceStatus)
  // required .PokeStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .NameSpace data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NameSpaceStatus)
}

::google::protobuf::uint8* NameSpaceStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NameSpaceStatus)
  // required .PokeStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .NameSpace data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NameSpaceStatus)
  return target;
}

int NameSpaceStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PokeStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .NameSpace data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameSpaceStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameSpaceStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameSpaceStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameSpaceStatus::MergeFrom(const NameSpaceStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameSpaceStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameSpaceStatus::CopyFrom(const NameSpaceStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameSpaceStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void NameSpaceStatus::Swap(NameSpaceStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameSpaceStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameSpaceStatus_descriptor_;
  metadata.reflection = NameSpaceStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* JobOperation_JobAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobOperation_JobAction_descriptor_;
}
bool JobOperation_JobAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const JobOperation_JobAction JobOperation::ADDJOB;
const JobOperation_JobAction JobOperation::STOPJOB;
const JobOperation_JobAction JobOperation::REMOVEJOB;
const JobOperation_JobAction JobOperation::LISTJOBS;
const JobOperation_JobAction JobOperation::JobAction_MIN;
const JobOperation_JobAction JobOperation::JobAction_MAX;
const int JobOperation::JobAction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int JobOperation::kActionFieldNumber;
const int JobOperation::kJobIdFieldNumber;
const int JobOperation::kDataFieldNumber;
#endif  // !_MSC_VER

JobOperation::JobOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobOperation)
}

void JobOperation::InitAsDefaultInstance() {
  data_ = const_cast< ::JobDesc*>(&::JobDesc::default_instance());
}

JobOperation::JobOperation(const JobOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JobOperation)
}

void JobOperation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  action_ = 1;
  job_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobOperation::~JobOperation() {
  // @@protoc_insertion_point(destructor:JobOperation)
  SharedDtor();
}

void JobOperation::SharedDtor() {
  if (job_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete job_id_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void JobOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobOperation_descriptor_;
}

const JobOperation& JobOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

JobOperation* JobOperation::default_instance_ = NULL;

JobOperation* JobOperation::New() const {
  return new JobOperation;
}

void JobOperation::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    action_ = 1;
    if (has_job_id()) {
      if (job_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        job_id_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::JobDesc::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JobOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .JobOperation.JobAction action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::JobOperation_JobAction_IsValid(value)) {
            set_action(static_cast< ::JobOperation_JobAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_job_id;
        break;
      }

      // optional string job_id = 2;
      case 2: {
        if (tag == 18) {
         parse_job_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->job_id().data(), this->job_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "job_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .JobDesc data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JobOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JobOperation)
  return false;
#undef DO_
}

void JobOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JobOperation)
  // required .JobOperation.JobAction action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional string job_id = 2;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "job_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->job_id(), output);
  }

  // optional .JobDesc data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JobOperation)
}

::google::protobuf::uint8* JobOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobOperation)
  // required .JobOperation.JobAction action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional string job_id = 2;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "job_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->job_id(), target);
  }

  // optional .JobDesc data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JobOperation)
  return target;
}

int JobOperation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .JobOperation.JobAction action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional string job_id = 2;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->job_id());
    }

    // optional .JobDesc data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobOperation::MergeFrom(const JobOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
    if (from.has_data()) {
      mutable_data()->::JobDesc::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobOperation::CopyFrom(const JobOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void JobOperation::Swap(JobOperation* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(job_id_, other->job_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobOperation_descriptor_;
  metadata.reflection = JobOperation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobProposal::kNameSpaceFieldNumber;
const int JobProposal::kOwnerIdFieldNumber;
const int JobProposal::kJobIdFieldNumber;
const int JobProposal::kWeightFieldNumber;
const int JobProposal::kOptionsFieldNumber;
#endif  // !_MSC_VER

JobProposal::JobProposal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobProposal)
}

void JobProposal::InitAsDefaultInstance() {
  options_ = const_cast< ::NameValueSet*>(&::NameValueSet::default_instance());
}

JobProposal::JobProposal(const JobProposal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JobProposal)
}

void JobProposal::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_space_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_id_ = GOOGLE_LONGLONG(0);
  job_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_ = 0;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobProposal::~JobProposal() {
  // @@protoc_insertion_point(destructor:JobProposal)
  SharedDtor();
}

void JobProposal::SharedDtor() {
  if (name_space_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_space_;
  }
  if (job_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete job_id_;
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void JobProposal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobProposal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobProposal_descriptor_;
}

const JobProposal& JobProposal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

JobProposal* JobProposal::default_instance_ = NULL;

JobProposal* JobProposal::New() const {
  return new JobProposal;
}

void JobProposal::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_name_space()) {
      if (name_space_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_space_->clear();
      }
    }
    owner_id_ = GOOGLE_LONGLONG(0);
    if (has_job_id()) {
      if (job_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        job_id_->clear();
      }
    }
    weight_ = 0;
    if (has_options()) {
      if (options_ != NULL) options_->::NameValueSet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobProposal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JobProposal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name_space = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_space()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name_space().data(), this->name_space().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name_space");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner_id;
        break;
      }

      // required int64 owner_id = 2;
      case 2: {
        if (tag == 16) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_job_id;
        break;
      }

      // required string job_id = 3;
      case 3: {
        if (tag == 26) {
         parse_job_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->job_id().data(), this->job_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "job_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_weight;
        break;
      }

      // required int32 weight = 4;
      case 4: {
        if (tag == 32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_options;
        break;
      }

      // optional .NameValueSet options = 5;
      case 5: {
        if (tag == 42) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JobProposal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JobProposal)
  return false;
#undef DO_
}

void JobProposal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JobProposal)
  // required string name_space = 1;
  if (has_name_space()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_space().data(), this->name_space().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name_space");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name_space(), output);
  }

  // required int64 owner_id = 2;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->owner_id(), output);
  }

  // required string job_id = 3;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "job_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->job_id(), output);
  }

  // required int32 weight = 4;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->weight(), output);
  }

  // optional .NameValueSet options = 5;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JobProposal)
}

::google::protobuf::uint8* JobProposal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobProposal)
  // required string name_space = 1;
  if (has_name_space()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_space().data(), this->name_space().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name_space");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name_space(), target);
  }

  // required int64 owner_id = 2;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->owner_id(), target);
  }

  // required string job_id = 3;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "job_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->job_id(), target);
  }

  // required int32 weight = 4;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->weight(), target);
  }

  // optional .NameValueSet options = 5;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JobProposal)
  return target;
}

int JobProposal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name_space = 1;
    if (has_name_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_space());
    }

    // required int64 owner_id = 2;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->owner_id());
    }

    // required string job_id = 3;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->job_id());
    }

    // required int32 weight = 4;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

    // optional .NameValueSet options = 5;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobProposal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobProposal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobProposal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobProposal::MergeFrom(const JobProposal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name_space()) {
      set_name_space(from.name_space());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_options()) {
      mutable_options()->::NameValueSet::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobProposal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobProposal::CopyFrom(const JobProposal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobProposal::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_options()) {
    if (!this->options().IsInitialized()) return false;
  }
  return true;
}

void JobProposal::Swap(JobProposal* other) {
  if (other != this) {
    std::swap(name_space_, other->name_space_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(job_id_, other->job_id_);
    std::swap(weight_, other->weight_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobProposal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobProposal_descriptor_;
  metadata.reflection = JobProposal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobBid::kNameSpaceFieldNumber;
const int JobBid::kOwnerIdFieldNumber;
const int JobBid::kJobIdFieldNumber;
const int JobBid::kBidFieldNumber;
#endif  // !_MSC_VER

JobBid::JobBid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobBid)
}

void JobBid::InitAsDefaultInstance() {
}

JobBid::JobBid(const JobBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JobBid)
}

void JobBid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_space_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_id_ = GOOGLE_LONGLONG(0);
  job_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobBid::~JobBid() {
  // @@protoc_insertion_point(destructor:JobBid)
  SharedDtor();
}

void JobBid::SharedDtor() {
  if (name_space_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_space_;
  }
  if (job_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete job_id_;
  }
  if (this != default_instance_) {
  }
}

void JobBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobBid_descriptor_;
}

const JobBid& JobBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

JobBid* JobBid::default_instance_ = NULL;

JobBid* JobBid::New() const {
  return new JobBid;
}

void JobBid::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name_space()) {
      if (name_space_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_space_->clear();
      }
    }
    owner_id_ = GOOGLE_LONGLONG(0);
    if (has_job_id()) {
      if (job_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        job_id_->clear();
      }
    }
    bid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JobBid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name_space = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_space()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name_space().data(), this->name_space().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name_space");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner_id;
        break;
      }

      // required int64 owner_id = 2;
      case 2: {
        if (tag == 16) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_job_id;
        break;
      }

      // required string job_id = 3;
      case 3: {
        if (tag == 26) {
         parse_job_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->job_id().data(), this->job_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "job_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bid;
        break;
      }

      // required int32 bid = 4;
      case 4: {
        if (tag == 32) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JobBid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JobBid)
  return false;
#undef DO_
}

void JobBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JobBid)
  // required string name_space = 1;
  if (has_name_space()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_space().data(), this->name_space().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name_space");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name_space(), output);
  }

  // required int64 owner_id = 2;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->owner_id(), output);
  }

  // required string job_id = 3;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "job_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->job_id(), output);
  }

  // required int32 bid = 4;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JobBid)
}

::google::protobuf::uint8* JobBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobBid)
  // required string name_space = 1;
  if (has_name_space()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name_space().data(), this->name_space().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name_space");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name_space(), target);
  }

  // required int64 owner_id = 2;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->owner_id(), target);
  }

  // required string job_id = 3;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "job_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->job_id(), target);
  }

  // required int32 bid = 4;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JobBid)
  return target;
}

int JobBid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name_space = 1;
    if (has_name_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_space());
    }

    // required int64 owner_id = 2;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->owner_id());
    }

    // required string job_id = 3;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->job_id());
    }

    // required int32 bid = 4;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobBid::MergeFrom(const JobBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name_space()) {
      set_name_space(from.name_space());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobBid::CopyFrom(const JobBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobBid::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void JobBid::Swap(JobBid* other) {
  if (other != this) {
    std::swap(name_space_, other->name_space_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(job_id_, other->job_id_);
    std::swap(bid_, other->bid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobBid_descriptor_;
  metadata.reflection = JobBid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobStatus::kJobIdFieldNumber;
const int JobStatus::kStatusFieldNumber;
const int JobStatus::kJobStateFieldNumber;
const int JobStatus::kDataFieldNumber;
#endif  // !_MSC_VER

JobStatus::JobStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobStatus)
}

void JobStatus::InitAsDefaultInstance() {
}

JobStatus::JobStatus(const JobStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JobStatus)
}

void JobStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  job_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 1;
  job_state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobStatus::~JobStatus() {
  // @@protoc_insertion_point(destructor:JobStatus)
  SharedDtor();
}

void JobStatus::SharedDtor() {
  if (job_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete job_id_;
  }
  if (this != default_instance_) {
  }
}

void JobStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobStatus_descriptor_;
}

const JobStatus& JobStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

JobStatus* JobStatus::default_instance_ = NULL;

JobStatus* JobStatus::New() const {
  return new JobStatus;
}

void JobStatus::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_job_id()) {
      if (job_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        job_id_->clear();
      }
    }
    status_ = 1;
    job_state_ = 1;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JobStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string job_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->job_id().data(), this->job_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "job_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .PokeStatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PokeStatus_IsValid(value)) {
            set_status(static_cast< ::PokeStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_job_state;
        break;
      }

      // required .JobDesc.JobCode job_state = 3;
      case 3: {
        if (tag == 24) {
         parse_job_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::JobDesc_JobCode_IsValid(value)) {
            set_job_state(static_cast< ::JobDesc_JobCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .JobDesc data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JobStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JobStatus)
  return false;
#undef DO_
}

void JobStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JobStatus)
  // required string job_id = 1;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "job_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->job_id(), output);
  }

  // required .PokeStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required .JobDesc.JobCode job_state = 3;
  if (has_job_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->job_state(), output);
  }

  // repeated .JobDesc data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JobStatus)
}

::google::protobuf::uint8* JobStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobStatus)
  // required string job_id = 1;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "job_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->job_id(), target);
  }

  // required .PokeStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required .JobDesc.JobCode job_state = 3;
  if (has_job_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->job_state(), target);
  }

  // repeated .JobDesc data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JobStatus)
  return target;
}

int JobStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string job_id = 1;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->job_id());
    }

    // required .PokeStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required .JobDesc.JobCode job_state = 3;
    if (has_job_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_state());
    }

  }
  // repeated .JobDesc data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobStatus::MergeFrom(const JobStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_job_state()) {
      set_job_state(from.job_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatus::CopyFrom(const JobStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void JobStatus::Swap(JobStatus* other) {
  if (other != this) {
    std::swap(job_id_, other->job_id_);
    std::swap(status_, other->status_);
    std::swap(job_state_, other->job_state_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobStatus_descriptor_;
  metadata.reflection = JobStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoutingPath::kNodeIdFieldNumber;
const int RoutingPath::kTimeFieldNumber;
#endif  // !_MSC_VER

RoutingPath::RoutingPath()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoutingPath)
}

void RoutingPath::InitAsDefaultInstance() {
}

RoutingPath::RoutingPath(const RoutingPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoutingPath)
}

void RoutingPath::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoutingPath::~RoutingPath() {
  // @@protoc_insertion_point(destructor:RoutingPath)
  SharedDtor();
}

void RoutingPath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoutingPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoutingPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoutingPath_descriptor_;
}

const RoutingPath& RoutingPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

RoutingPath* RoutingPath::default_instance_ = NULL;

RoutingPath* RoutingPath::New() const {
  return new RoutingPath;
}

void RoutingPath::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoutingPath*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_, node_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoutingPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoutingPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoutingPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoutingPath)
  return false;
#undef DO_
}

void RoutingPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoutingPath)
  // required int32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // required int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoutingPath)
}

::google::protobuf::uint8* RoutingPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoutingPath)
  // required int32 node_id = 1;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // required int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoutingPath)
  return target;
}

int RoutingPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    // required int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoutingPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoutingPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoutingPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoutingPath::MergeFrom(const RoutingPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoutingPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingPath::CopyFrom(const RoutingPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingPath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoutingPath::Swap(RoutingPath* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoutingPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoutingPath_descriptor_;
  metadata.reflection = RoutingPath_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Header_Routing_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_Routing_descriptor_;
}
bool Header_Routing_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 4:
    case 10:
    case 100:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Header_Routing Header::PING;
const Header_Routing Header::NAMESPACES;
const Header_Routing Header::JOBS;
const Header_Routing Header::REPORTS;
const Header_Routing Header::MANAGE;
const Header_Routing Header::Routing_MIN;
const Header_Routing Header::Routing_MAX;
const int Header::Routing_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Header::kRoutingIdFieldNumber;
const int Header::kOriginatorFieldNumber;
const int Header::kTagFieldNumber;
const int Header::kTimeFieldNumber;
const int Header::kReplyCodeFieldNumber;
const int Header::kReplyMsgFieldNumber;
const int Header::kPathFieldNumber;
const int Header::kToNodeFieldNumber;
const int Header::kOptionsFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Header)
}

void Header::InitAsDefaultInstance() {
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Header)
}

void Header::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  routing_id_ = 2;
  originator_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_LONGLONG(0);
  reply_code_ = 1;
  reply_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (reply_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reply_msg_;
  }
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & 191) {
    routing_id_ = 2;
    originator_ = 0;
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    reply_code_ = 1;
    if (has_reply_msg()) {
      if (reply_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reply_msg_->clear();
      }
    }
    tonode_ = 0;
  }
  path_.Clear();
  options_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Header.Routing routing_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Header_Routing_IsValid(value)) {
            set_routing_id(static_cast< ::Header_Routing >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_originator;
        break;
      }

      // required int32 originator = 2;
      case 2: {
        if (tag == 16) {
         parse_originator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &originator_)));
          set_has_originator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tag;
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (tag == 26) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reply_code;
        break;
      }

      // optional .PokeStatus reply_code = 5;
      case 5: {
        if (tag == 40) {
         parse_reply_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PokeStatus_IsValid(value)) {
            set_reply_code(static_cast< ::PokeStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_reply_msg;
        break;
      }

      // optional string reply_msg = 6;
      case 6: {
        if (tag == 50) {
         parse_reply_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reply_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reply_msg().data(), this->reply_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reply_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_path;
        break;
      }

      // repeated .RoutingPath path = 7;
      case 7: {
        if (tag == 58) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_path;
        if (input->ExpectTag(64)) goto parse_toNode;
        break;
      }

      // optional int32 toNode = 8;
      case 8: {
        if (tag == 64) {
         parse_toNode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tonode_)));
          set_has_tonode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_options;
        break;
      }

      // repeated .NameValueSet options = 9;
      case 9: {
        if (tag == 74) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_options;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Header)
  // required .Header.Routing routing_id = 1;
  if (has_routing_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->routing_id(), output);
  }

  // required int32 originator = 2;
  if (has_originator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->originator(), output);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  // optional .PokeStatus reply_code = 5;
  if (has_reply_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->reply_code(), output);
  }

  // optional string reply_msg = 6;
  if (has_reply_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reply_msg().data(), this->reply_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reply_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->reply_msg(), output);
  }

  // repeated .RoutingPath path = 7;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->path(i), output);
  }

  // optional int32 toNode = 8;
  if (has_tonode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tonode(), output);
  }

  // repeated .NameValueSet options = 9;
  for (int i = 0; i < this->options_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->options(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Header)
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Header)
  // required .Header.Routing routing_id = 1;
  if (has_routing_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->routing_id(), target);
  }

  // required int32 originator = 2;
  if (has_originator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->originator(), target);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  // optional .PokeStatus reply_code = 5;
  if (has_reply_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->reply_code(), target);
  }

  // optional string reply_msg = 6;
  if (has_reply_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reply_msg().data(), this->reply_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reply_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reply_msg(), target);
  }

  // repeated .RoutingPath path = 7;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->path(i), target);
  }

  // optional int32 toNode = 8;
  if (has_tonode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tonode(), target);
  }

  // repeated .NameValueSet options = 9;
  for (int i = 0; i < this->options_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->options(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Header)
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Header.Routing routing_id = 1;
    if (has_routing_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->routing_id());
    }

    // required int32 originator = 2;
    if (has_originator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->originator());
    }

    // optional string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional .PokeStatus reply_code = 5;
    if (has_reply_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reply_code());
    }

    // optional string reply_msg = 6;
    if (has_reply_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reply_msg());
    }

    // optional int32 toNode = 8;
    if (has_tonode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tonode());
    }

  }
  // repeated .RoutingPath path = 7;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  // repeated .NameValueSet options = 9;
  total_size += 1 * this->options_size();
  for (int i = 0; i < this->options_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->options(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  options_.MergeFrom(from.options_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_routing_id()) {
      set_routing_id(from.routing_id());
    }
    if (from.has_originator()) {
      set_originator(from.originator());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_reply_code()) {
      set_reply_code(from.reply_code());
    }
    if (from.has_reply_msg()) {
      set_reply_msg(from.reply_msg());
    }
    if (from.has_tonode()) {
      set_tonode(from.tonode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->path())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->options())) return false;
  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(routing_id_, other->routing_id_);
    std::swap(originator_, other->originator_);
    std::swap(tag_, other->tag_);
    std::swap(time_, other->time_);
    std::swap(reply_code_, other->reply_code_);
    std::swap(reply_msg_, other->reply_msg_);
    path_.Swap(&other->path_);
    std::swap(tonode_, other->tonode_);
    options_.Swap(&other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Payload::kPingFieldNumber;
const int Payload::kSpaceOpFieldNumber;
const int Payload::kJobOpFieldNumber;
const int Payload::kJobStatusFieldNumber;
const int Payload::kSpaceStatusFieldNumber;
#endif  // !_MSC_VER

Payload::Payload()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Payload)
}

void Payload::InitAsDefaultInstance() {
  ping_ = const_cast< ::Ping*>(&::Ping::default_instance());
  space_op_ = const_cast< ::NameSpaceOperation*>(&::NameSpaceOperation::default_instance());
  job_op_ = const_cast< ::JobOperation*>(&::JobOperation::default_instance());
  job_status_ = const_cast< ::JobStatus*>(&::JobStatus::default_instance());
  space_status_ = const_cast< ::NameSpaceStatus*>(&::NameSpaceStatus::default_instance());
}

Payload::Payload(const Payload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Payload)
}

void Payload::SharedCtor() {
  _cached_size_ = 0;
  ping_ = NULL;
  space_op_ = NULL;
  job_op_ = NULL;
  job_status_ = NULL;
  space_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Payload::~Payload() {
  // @@protoc_insertion_point(destructor:Payload)
  SharedDtor();
}

void Payload::SharedDtor() {
  if (this != default_instance_) {
    delete ping_;
    delete space_op_;
    delete job_op_;
    delete job_status_;
    delete space_status_;
  }
}

void Payload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Payload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Payload_descriptor_;
}

const Payload& Payload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

Payload* Payload::default_instance_ = NULL;

Payload* Payload::New() const {
  return new Payload;
}

void Payload::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_ping()) {
      if (ping_ != NULL) ping_->::Ping::Clear();
    }
    if (has_space_op()) {
      if (space_op_ != NULL) space_op_->::NameSpaceOperation::Clear();
    }
    if (has_job_op()) {
      if (job_op_ != NULL) job_op_->::JobOperation::Clear();
    }
    if (has_job_status()) {
      if (job_status_ != NULL) job_status_->::JobStatus::Clear();
    }
    if (has_space_status()) {
      if (space_status_ != NULL) space_status_->::NameSpaceStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Payload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Payload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Ping ping = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_space_op;
        break;
      }

      // optional .NameSpaceOperation space_op = 2;
      case 2: {
        if (tag == 18) {
         parse_space_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_space_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_job_op;
        break;
      }

      // optional .JobOperation job_op = 3;
      case 3: {
        if (tag == 26) {
         parse_job_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_space_status;
        break;
      }

      // optional .NameSpaceStatus space_status = 12;
      case 12: {
        if (tag == 98) {
         parse_space_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_space_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_job_status;
        break;
      }

      // optional .JobStatus job_status = 13;
      case 13: {
        if (tag == 106) {
         parse_job_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Payload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Payload)
  return false;
#undef DO_
}

void Payload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Payload)
  // optional .Ping ping = 1;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ping(), output);
  }

  // optional .NameSpaceOperation space_op = 2;
  if (has_space_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->space_op(), output);
  }

  // optional .JobOperation job_op = 3;
  if (has_job_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->job_op(), output);
  }

  // optional .NameSpaceStatus space_status = 12;
  if (has_space_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->space_status(), output);
  }

  // optional .JobStatus job_status = 13;
  if (has_job_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->job_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Payload)
}

::google::protobuf::uint8* Payload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Payload)
  // optional .Ping ping = 1;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ping(), target);
  }

  // optional .NameSpaceOperation space_op = 2;
  if (has_space_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->space_op(), target);
  }

  // optional .JobOperation job_op = 3;
  if (has_job_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->job_op(), target);
  }

  // optional .NameSpaceStatus space_status = 12;
  if (has_space_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->space_status(), target);
  }

  // optional .JobStatus job_status = 13;
  if (has_job_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->job_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Payload)
  return target;
}

int Payload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Ping ping = 1;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping());
    }

    // optional .NameSpaceOperation space_op = 2;
    if (has_space_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->space_op());
    }

    // optional .JobOperation job_op = 3;
    if (has_job_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->job_op());
    }

    // optional .JobStatus job_status = 13;
    if (has_job_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->job_status());
    }

    // optional .NameSpaceStatus space_status = 12;
    if (has_space_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->space_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Payload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Payload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Payload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Payload::MergeFrom(const Payload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ping()) {
      mutable_ping()->::Ping::MergeFrom(from.ping());
    }
    if (from.has_space_op()) {
      mutable_space_op()->::NameSpaceOperation::MergeFrom(from.space_op());
    }
    if (from.has_job_op()) {
      mutable_job_op()->::JobOperation::MergeFrom(from.job_op());
    }
    if (from.has_job_status()) {
      mutable_job_status()->::JobStatus::MergeFrom(from.job_status());
    }
    if (from.has_space_status()) {
      mutable_space_status()->::NameSpaceStatus::MergeFrom(from.space_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Payload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payload::CopyFrom(const Payload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload::IsInitialized() const {

  if (has_ping()) {
    if (!this->ping().IsInitialized()) return false;
  }
  if (has_space_op()) {
    if (!this->space_op().IsInitialized()) return false;
  }
  if (has_job_op()) {
    if (!this->job_op().IsInitialized()) return false;
  }
  if (has_job_status()) {
    if (!this->job_status().IsInitialized()) return false;
  }
  if (has_space_status()) {
    if (!this->space_status().IsInitialized()) return false;
  }
  return true;
}

void Payload::Swap(Payload* other) {
  if (other != this) {
    std::swap(ping_, other->ping_);
    std::swap(space_op_, other->space_op_);
    std::swap(job_op_, other->job_op_);
    std::swap(job_status_, other->job_status_);
    std::swap(space_status_, other->space_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Payload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Payload_descriptor_;
  metadata.reflection = Payload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kHeaderFieldNumber;
const int Request::kBodyFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request)
}

void Request::InitAsDefaultInstance() {
  header_ = const_cast< ::Header*>(&::Header::default_instance());
  body_ = const_cast< ::Payload*>(&::Payload::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete body_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::Header::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::Payload::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required .Payload body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request)
  // required .Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required .Payload body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request)
  // required .Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required .Payload body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required .Payload body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::Header::MergeFrom(from.header());
    }
    if (from.has_body()) {
      mutable_body()->::Payload::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (has_body()) {
    if (!this->body().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Heartbeat::kTimeRefFieldNumber;
#endif  // !_MSC_VER

Heartbeat::Heartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Heartbeat)
}

void Heartbeat::InitAsDefaultInstance() {
}

Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Heartbeat)
}

void Heartbeat::SharedCtor() {
  _cached_size_ = 0;
  time_ref_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:Heartbeat)
  SharedDtor();
}

void Heartbeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Heartbeat_descriptor_;
}

const Heartbeat& Heartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

Heartbeat* Heartbeat::default_instance_ = NULL;

Heartbeat* Heartbeat::New() const {
  return new Heartbeat;
}

void Heartbeat::Clear() {
  time_ref_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Heartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time_ref = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_ref_)));
          set_has_time_ref();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Heartbeat)
  return false;
#undef DO_
}

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Heartbeat)
  // required int64 time_ref = 2;
  if (has_time_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time_ref(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Heartbeat)
}

::google::protobuf::uint8* Heartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Heartbeat)
  // required int64 time_ref = 2;
  if (has_time_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time_ref(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Heartbeat)
  return target;
}

int Heartbeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time_ref = 2;
    if (has_time_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_ref());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Heartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Heartbeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_ref()) {
      set_time_ref(from.time_ref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other != this) {
    std::swap(time_ref_, other->time_ref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Heartbeat_descriptor_;
  metadata.reflection = Heartbeat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Network_NetworkAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Network_NetworkAction_descriptor_;
}
bool Network_NetworkAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 55:
    case 56:
    case 999:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Network_NetworkAction Network::NODEJOIN;
const Network_NetworkAction Network::NODELEAVE;
const Network_NetworkAction Network::NODEDEAD;
const Network_NetworkAction Network::CREATEMAP;
const Network_NetworkAction Network::ANNOUNCE;
const Network_NetworkAction Network::SHUTDOWN;
const Network_NetworkAction Network::NetworkAction_MIN;
const Network_NetworkAction Network::NetworkAction_MAX;
const int Network::NetworkAction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Network::kFromNodeIdFieldNumber;
const int Network::kToNodeIdFieldNumber;
const int Network::kActionFieldNumber;
#endif  // !_MSC_VER

Network::Network()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Network)
}

void Network::InitAsDefaultInstance() {
}

Network::Network(const Network& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Network)
}

void Network::SharedCtor() {
  _cached_size_ = 0;
  from_node_id_ = 0;
  to_node_id_ = 0;
  action_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Network::~Network() {
  // @@protoc_insertion_point(destructor:Network)
  SharedDtor();
}

void Network::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Network::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Network::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Network_descriptor_;
}

const Network& Network::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

Network* Network::default_instance_ = NULL;

Network* Network::New() const {
  return new Network;
}

void Network::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Network*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(from_node_id_, to_node_id_);
    action_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Network::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Network)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 from_node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_node_id_)));
          set_has_from_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_node_id;
        break;
      }

      // required int32 to_node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_node_id_)));
          set_has_to_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // required .Network.NetworkAction action = 3;
      case 3: {
        if (tag == 24) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Network_NetworkAction_IsValid(value)) {
            set_action(static_cast< ::Network_NetworkAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Network)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Network)
  return false;
#undef DO_
}

void Network::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Network)
  // required int32 from_node_id = 1;
  if (has_from_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->from_node_id(), output);
  }

  // required int32 to_node_id = 2;
  if (has_to_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to_node_id(), output);
  }

  // required .Network.NetworkAction action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Network)
}

::google::protobuf::uint8* Network::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Network)
  // required int32 from_node_id = 1;
  if (has_from_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->from_node_id(), target);
  }

  // required int32 to_node_id = 2;
  if (has_to_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to_node_id(), target);
  }

  // required .Network.NetworkAction action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Network)
  return target;
}

int Network::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 from_node_id = 1;
    if (has_from_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_node_id());
    }

    // required int32 to_node_id = 2;
    if (has_to_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to_node_id());
    }

    // required .Network.NetworkAction action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Network::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Network* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Network*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Network::MergeFrom(const Network& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_node_id()) {
      set_from_node_id(from.from_node_id());
    }
    if (from.has_to_node_id()) {
      set_to_node_id(from.to_node_id());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Network::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Network::CopyFrom(const Network& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Network::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Network::Swap(Network* other) {
  if (other != this) {
    std::swap(from_node_id_, other->from_node_id_);
    std::swap(to_node_id_, other->to_node_id_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Network::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Network_descriptor_;
  metadata.reflection = Network_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LeaderElection_ElectAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderElection_ElectAction_descriptor_;
}
bool LeaderElection_ElectAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LeaderElection_ElectAction LeaderElection::DECLAREELECTION;
const LeaderElection_ElectAction LeaderElection::NOMINATE;
const LeaderElection_ElectAction LeaderElection::ABSTAIN;
const LeaderElection_ElectAction LeaderElection::DECLAREWINNER;
const LeaderElection_ElectAction LeaderElection::DECLAREVOID;
const LeaderElection_ElectAction LeaderElection::WHOISTHELEADER;
const LeaderElection_ElectAction LeaderElection::THELEADERIS;
const LeaderElection_ElectAction LeaderElection::ElectAction_MIN;
const LeaderElection_ElectAction LeaderElection::ElectAction_MAX;
const int LeaderElection::ElectAction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LeaderElection::kElectIdFieldNumber;
const int LeaderElection::kCandidateIdFieldNumber;
const int LeaderElection::kDescFieldNumber;
const int LeaderElection::kActionFieldNumber;
const int LeaderElection::kExpiresFieldNumber;
const int LeaderElection::kHopsFieldNumber;
#endif  // !_MSC_VER

LeaderElection::LeaderElection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LeaderElection)
}

void LeaderElection::InitAsDefaultInstance() {
}

LeaderElection::LeaderElection(const LeaderElection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LeaderElection)
}

void LeaderElection::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  elect_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  candidate_id_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_ = 1;
  expires_ = GOOGLE_LONGLONG(-1);
  hops_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaderElection::~LeaderElection() {
  // @@protoc_insertion_point(destructor:LeaderElection)
  SharedDtor();
}

void LeaderElection::SharedDtor() {
  if (elect_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete elect_id_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void LeaderElection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderElection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderElection_descriptor_;
}

const LeaderElection& LeaderElection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

LeaderElection* LeaderElection::default_instance_ = NULL;

LeaderElection* LeaderElection::New() const {
  return new LeaderElection;
}

void LeaderElection::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_elect_id()) {
      if (elect_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        elect_id_->clear();
      }
    }
    candidate_id_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    action_ = 1;
    expires_ = GOOGLE_LONGLONG(-1);
    hops_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaderElection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LeaderElection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string elect_id = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_elect_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->elect_id().data(), this->elect_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "elect_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_candidate_id;
        break;
      }

      // required int32 candidate_id = 3;
      case 3: {
        if (tag == 24) {
         parse_candidate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candidate_id_)));
          set_has_candidate_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }

      // optional string desc = 4;
      case 4: {
        if (tag == 34) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_action;
        break;
      }

      // required .LeaderElection.ElectAction action = 5;
      case 5: {
        if (tag == 40) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LeaderElection_ElectAction_IsValid(value)) {
            set_action(static_cast< ::LeaderElection_ElectAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_expires;
        break;
      }

      // optional int64 expires = 6 [default = -1];
      case 6: {
        if (tag == 48) {
         parse_expires:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expires_)));
          set_has_expires();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hops;
        break;
      }

      // optional int32 hops = 7 [default = -1];
      case 7: {
        if (tag == 56) {
         parse_hops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hops_)));
          set_has_hops();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LeaderElection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LeaderElection)
  return false;
#undef DO_
}

void LeaderElection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LeaderElection)
  // required string elect_id = 2;
  if (has_elect_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->elect_id().data(), this->elect_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "elect_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->elect_id(), output);
  }

  // required int32 candidate_id = 3;
  if (has_candidate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->candidate_id(), output);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->desc(), output);
  }

  // required .LeaderElection.ElectAction action = 5;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->action(), output);
  }

  // optional int64 expires = 6 [default = -1];
  if (has_expires()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->expires(), output);
  }

  // optional int32 hops = 7 [default = -1];
  if (has_hops()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hops(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LeaderElection)
}

::google::protobuf::uint8* LeaderElection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LeaderElection)
  // required string elect_id = 2;
  if (has_elect_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->elect_id().data(), this->elect_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "elect_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->elect_id(), target);
  }

  // required int32 candidate_id = 3;
  if (has_candidate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->candidate_id(), target);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  // required .LeaderElection.ElectAction action = 5;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->action(), target);
  }

  // optional int64 expires = 6 [default = -1];
  if (has_expires()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->expires(), target);
  }

  // optional int32 hops = 7 [default = -1];
  if (has_hops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hops(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LeaderElection)
  return target;
}

int LeaderElection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string elect_id = 2;
    if (has_elect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->elect_id());
    }

    // required int32 candidate_id = 3;
    if (has_candidate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->candidate_id());
    }

    // optional string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required .LeaderElection.ElectAction action = 5;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional int64 expires = 6 [default = -1];
    if (has_expires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expires());
    }

    // optional int32 hops = 7 [default = -1];
    if (has_hops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hops());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderElection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaderElection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaderElection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaderElection::MergeFrom(const LeaderElection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elect_id()) {
      set_elect_id(from.elect_id());
    }
    if (from.has_candidate_id()) {
      set_candidate_id(from.candidate_id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_expires()) {
      set_expires(from.expires());
    }
    if (from.has_hops()) {
      set_hops(from.hops());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaderElection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderElection::CopyFrom(const LeaderElection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderElection::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void LeaderElection::Swap(LeaderElection* other) {
  if (other != this) {
    std::swap(elect_id_, other->elect_id_);
    std::swap(candidate_id_, other->candidate_id_);
    std::swap(desc_, other->desc_);
    std::swap(action_, other->action_);
    std::swap(expires_, other->expires_);
    std::swap(hops_, other->hops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaderElection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaderElection_descriptor_;
  metadata.reflection = LeaderElection_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* VotingBallot_BallotType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VotingBallot_BallotType_descriptor_;
}
bool VotingBallot_BallotType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VotingBallot_BallotType VotingBallot::SIMPLEMAJORITY;
const VotingBallot_BallotType VotingBallot::TIMECONSTRAINEDMAJORITY;
const VotingBallot_BallotType VotingBallot::RANKED;
const VotingBallot_BallotType VotingBallot::INSTANTRUNOFF;
const VotingBallot_BallotType VotingBallot::BallotType_MIN;
const VotingBallot_BallotType VotingBallot::BallotType_MAX;
const int VotingBallot::BallotType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int VotingBallot::kBallotIdFieldNumber;
const int VotingBallot::kDescFieldNumber;
const int VotingBallot::kBallotFormatFieldNumber;
const int VotingBallot::kExpiresSecFieldNumber;
const int VotingBallot::kMarginToWinFieldNumber;
const int VotingBallot::kMaxHopsFieldNumber;
#endif  // !_MSC_VER

VotingBallot::VotingBallot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VotingBallot)
}

void VotingBallot::InitAsDefaultInstance() {
}

VotingBallot::VotingBallot(const VotingBallot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VotingBallot)
}

void VotingBallot::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ballot_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ballot_format_ = 1;
  expires_sec_ = GOOGLE_LONGLONG(0);
  margin_to_win_ = 0;
  max_hops_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VotingBallot::~VotingBallot() {
  // @@protoc_insertion_point(destructor:VotingBallot)
  SharedDtor();
}

void VotingBallot::SharedDtor() {
  if (ballot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ballot_id_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void VotingBallot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VotingBallot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VotingBallot_descriptor_;
}

const VotingBallot& VotingBallot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

VotingBallot* VotingBallot::default_instance_ = NULL;

VotingBallot* VotingBallot::New() const {
  return new VotingBallot;
}

void VotingBallot::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_ballot_id()) {
      if (ballot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ballot_id_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    ballot_format_ = 1;
    expires_sec_ = GOOGLE_LONGLONG(0);
    margin_to_win_ = 0;
    max_hops_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VotingBallot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VotingBallot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ballot_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ballot_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ballot_id().data(), this->ballot_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ballot_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // required string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ballot_format;
        break;
      }

      // required .VotingBallot.BallotType ballot_format = 3;
      case 3: {
        if (tag == 24) {
         parse_ballot_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VotingBallot_BallotType_IsValid(value)) {
            set_ballot_format(static_cast< ::VotingBallot_BallotType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_expires_sec;
        break;
      }

      // optional int64 expires_sec = 6;
      case 6: {
        if (tag == 48) {
         parse_expires_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expires_sec_)));
          set_has_expires_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_margin_to_win;
        break;
      }

      // optional int32 margin_to_win = 7;
      case 7: {
        if (tag == 56) {
         parse_margin_to_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &margin_to_win_)));
          set_has_margin_to_win();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_hops;
        break;
      }

      // optional int32 max_hops = 8 [default = -1];
      case 8: {
        if (tag == 64) {
         parse_max_hops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_hops_)));
          set_has_max_hops();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VotingBallot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VotingBallot)
  return false;
#undef DO_
}

void VotingBallot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VotingBallot)
  // required string ballot_id = 1;
  if (has_ballot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ballot_id().data(), this->ballot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ballot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ballot_id(), output);
  }

  // required string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // required .VotingBallot.BallotType ballot_format = 3;
  if (has_ballot_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ballot_format(), output);
  }

  // optional int64 expires_sec = 6;
  if (has_expires_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->expires_sec(), output);
  }

  // optional int32 margin_to_win = 7;
  if (has_margin_to_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->margin_to_win(), output);
  }

  // optional int32 max_hops = 8 [default = -1];
  if (has_max_hops()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_hops(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VotingBallot)
}

::google::protobuf::uint8* VotingBallot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VotingBallot)
  // required string ballot_id = 1;
  if (has_ballot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ballot_id().data(), this->ballot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ballot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ballot_id(), target);
  }

  // required string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // required .VotingBallot.BallotType ballot_format = 3;
  if (has_ballot_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ballot_format(), target);
  }

  // optional int64 expires_sec = 6;
  if (has_expires_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->expires_sec(), target);
  }

  // optional int32 margin_to_win = 7;
  if (has_margin_to_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->margin_to_win(), target);
  }

  // optional int32 max_hops = 8 [default = -1];
  if (has_max_hops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_hops(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VotingBallot)
  return target;
}

int VotingBallot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ballot_id = 1;
    if (has_ballot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ballot_id());
    }

    // required string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required .VotingBallot.BallotType ballot_format = 3;
    if (has_ballot_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ballot_format());
    }

    // optional int64 expires_sec = 6;
    if (has_expires_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expires_sec());
    }

    // optional int32 margin_to_win = 7;
    if (has_margin_to_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->margin_to_win());
    }

    // optional int32 max_hops = 8 [default = -1];
    if (has_max_hops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_hops());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VotingBallot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VotingBallot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VotingBallot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VotingBallot::MergeFrom(const VotingBallot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ballot_id()) {
      set_ballot_id(from.ballot_id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_ballot_format()) {
      set_ballot_format(from.ballot_format());
    }
    if (from.has_expires_sec()) {
      set_expires_sec(from.expires_sec());
    }
    if (from.has_margin_to_win()) {
      set_margin_to_win(from.margin_to_win());
    }
    if (from.has_max_hops()) {
      set_max_hops(from.max_hops());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VotingBallot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VotingBallot::CopyFrom(const VotingBallot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VotingBallot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VotingBallot::Swap(VotingBallot* other) {
  if (other != this) {
    std::swap(ballot_id_, other->ballot_id_);
    std::swap(desc_, other->desc_);
    std::swap(ballot_format_, other->ballot_format_);
    std::swap(expires_sec_, other->expires_sec_);
    std::swap(margin_to_win_, other->margin_to_win_);
    std::swap(max_hops_, other->max_hops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VotingBallot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VotingBallot_descriptor_;
  metadata.reflection = VotingBallot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VotingCast::kVoterFieldNumber;
const int VotingCast::kBallotIdFieldNumber;
const int VotingCast::kCandidateFieldNumber;
const int VotingCast::kRankFieldNumber;
#endif  // !_MSC_VER

VotingCast::VotingCast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VotingCast)
}

void VotingCast::InitAsDefaultInstance() {
}

VotingCast::VotingCast(const VotingCast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VotingCast)
}

void VotingCast::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  voter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ballot_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  candidate_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VotingCast::~VotingCast() {
  // @@protoc_insertion_point(destructor:VotingCast)
  SharedDtor();
}

void VotingCast::SharedDtor() {
  if (voter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voter_;
  }
  if (ballot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ballot_id_;
  }
  if (this != default_instance_) {
  }
}

void VotingCast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VotingCast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VotingCast_descriptor_;
}

const VotingCast& VotingCast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

VotingCast* VotingCast::default_instance_ = NULL;

VotingCast* VotingCast::New() const {
  return new VotingCast;
}

void VotingCast::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VotingCast*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(candidate_, rank_);
    if (has_voter()) {
      if (voter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        voter_->clear();
      }
    }
    if (has_ballot_id()) {
      if (ballot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ballot_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VotingCast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VotingCast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string voter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->voter().data(), this->voter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "voter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ballot_id;
        break;
      }

      // required string ballot_id = 2;
      case 2: {
        if (tag == 18) {
         parse_ballot_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ballot_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ballot_id().data(), this->ballot_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ballot_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_candidate;
        break;
      }

      // optional int32 candidate = 10;
      case 10: {
        if (tag == 80) {
         parse_candidate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candidate_)));
          set_has_candidate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_rank;
        break;
      }

      // optional int32 rank = 11;
      case 11: {
        if (tag == 88) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VotingCast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VotingCast)
  return false;
#undef DO_
}

void VotingCast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VotingCast)
  // required string voter = 1;
  if (has_voter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voter().data(), this->voter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "voter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->voter(), output);
  }

  // required string ballot_id = 2;
  if (has_ballot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ballot_id().data(), this->ballot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ballot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ballot_id(), output);
  }

  // optional int32 candidate = 10;
  if (has_candidate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->candidate(), output);
  }

  // optional int32 rank = 11;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VotingCast)
}

::google::protobuf::uint8* VotingCast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VotingCast)
  // required string voter = 1;
  if (has_voter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->voter().data(), this->voter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "voter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->voter(), target);
  }

  // required string ballot_id = 2;
  if (has_ballot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ballot_id().data(), this->ballot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ballot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ballot_id(), target);
  }

  // optional int32 candidate = 10;
  if (has_candidate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->candidate(), target);
  }

  // optional int32 rank = 11;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VotingCast)
  return target;
}

int VotingCast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string voter = 1;
    if (has_voter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voter());
    }

    // required string ballot_id = 2;
    if (has_ballot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ballot_id());
    }

    // optional int32 candidate = 10;
    if (has_candidate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->candidate());
    }

    // optional int32 rank = 11;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VotingCast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VotingCast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VotingCast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VotingCast::MergeFrom(const VotingCast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voter()) {
      set_voter(from.voter());
    }
    if (from.has_ballot_id()) {
      set_ballot_id(from.ballot_id());
    }
    if (from.has_candidate()) {
      set_candidate(from.candidate());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VotingCast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VotingCast::CopyFrom(const VotingCast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VotingCast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VotingCast::Swap(VotingCast* other) {
  if (other != this) {
    std::swap(voter_, other->voter_);
    std::swap(ballot_id_, other->ballot_id_);
    std::swap(candidate_, other->candidate_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VotingCast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VotingCast_descriptor_;
  metadata.reflection = VotingCast_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* VotingStatus_VoteStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VotingStatus_VoteStatus_descriptor_;
}
bool VotingStatus_VoteStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VotingStatus_VoteStatus VotingStatus::BALLOTABANDONED;
const VotingStatus_VoteStatus VotingStatus::BALLOTWINNER;
const VotingStatus_VoteStatus VotingStatus::VoteStatus_MIN;
const VotingStatus_VoteStatus VotingStatus::VoteStatus_MAX;
const int VotingStatus::VoteStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int VotingStatus::kBallotIdFieldNumber;
const int VotingStatus::kStatusFieldNumber;
const int VotingStatus::kWinnerFieldNumber;
#endif  // !_MSC_VER

VotingStatus::VotingStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VotingStatus)
}

void VotingStatus::InitAsDefaultInstance() {
}

VotingStatus::VotingStatus(const VotingStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VotingStatus)
}

void VotingStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ballot_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 1;
  winner_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VotingStatus::~VotingStatus() {
  // @@protoc_insertion_point(destructor:VotingStatus)
  SharedDtor();
}

void VotingStatus::SharedDtor() {
  if (ballot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ballot_id_;
  }
  if (this != default_instance_) {
  }
}

void VotingStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VotingStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VotingStatus_descriptor_;
}

const VotingStatus& VotingStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

VotingStatus* VotingStatus::default_instance_ = NULL;

VotingStatus* VotingStatus::New() const {
  return new VotingStatus;
}

void VotingStatus::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_ballot_id()) {
      if (ballot_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ballot_id_->clear();
      }
    }
    status_ = 1;
    winner_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VotingStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VotingStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ballot_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ballot_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ballot_id().data(), this->ballot_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ballot_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .VotingStatus.VoteStatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VotingStatus_VoteStatus_IsValid(value)) {
            set_status(static_cast< ::VotingStatus_VoteStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_winner;
        break;
      }

      // optional int32 winner = 3;
      case 3: {
        if (tag == 24) {
         parse_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VotingStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VotingStatus)
  return false;
#undef DO_
}

void VotingStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VotingStatus)
  // required string ballot_id = 1;
  if (has_ballot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ballot_id().data(), this->ballot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ballot_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ballot_id(), output);
  }

  // required .VotingStatus.VoteStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional int32 winner = 3;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VotingStatus)
}

::google::protobuf::uint8* VotingStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VotingStatus)
  // required string ballot_id = 1;
  if (has_ballot_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ballot_id().data(), this->ballot_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ballot_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ballot_id(), target);
  }

  // required .VotingStatus.VoteStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional int32 winner = 3;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VotingStatus)
  return target;
}

int VotingStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ballot_id = 1;
    if (has_ballot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ballot_id());
    }

    // required .VotingStatus.VoteStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 winner = 3;
    if (has_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VotingStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VotingStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VotingStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VotingStatus::MergeFrom(const VotingStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ballot_id()) {
      set_ballot_id(from.ballot_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_winner()) {
      set_winner(from.winner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VotingStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VotingStatus::CopyFrom(const VotingStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VotingStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VotingStatus::Swap(VotingStatus* other) {
  if (other != this) {
    std::swap(ballot_id_, other->ballot_id_);
    std::swap(status_, other->status_);
    std::swap(winner_, other->winner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VotingStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VotingStatus_descriptor_;
  metadata.reflection = VotingStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MgmtHeader::kOriginatorFieldNumber;
const int MgmtHeader::kTimeFieldNumber;
const int MgmtHeader::kPathFieldNumber;
const int MgmtHeader::kToNodeFieldNumber;
#endif  // !_MSC_VER

MgmtHeader::MgmtHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MgmtHeader)
}

void MgmtHeader::InitAsDefaultInstance() {
}

MgmtHeader::MgmtHeader(const MgmtHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MgmtHeader)
}

void MgmtHeader::SharedCtor() {
  _cached_size_ = 0;
  originator_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  tonode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MgmtHeader::~MgmtHeader() {
  // @@protoc_insertion_point(destructor:MgmtHeader)
  SharedDtor();
}

void MgmtHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MgmtHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MgmtHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MgmtHeader_descriptor_;
}

const MgmtHeader& MgmtHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

MgmtHeader* MgmtHeader::default_instance_ = NULL;

MgmtHeader* MgmtHeader::New() const {
  return new MgmtHeader;
}

void MgmtHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MgmtHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_, tonode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MgmtHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MgmtHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 originator = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &originator_)));
          set_has_originator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_path;
        break;
      }

      // repeated .RoutingPath path = 7;
      case 7: {
        if (tag == 58) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_path;
        if (input->ExpectTag(64)) goto parse_toNode;
        break;
      }

      // optional int32 toNode = 8;
      case 8: {
        if (tag == 64) {
         parse_toNode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tonode_)));
          set_has_tonode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MgmtHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MgmtHeader)
  return false;
#undef DO_
}

void MgmtHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MgmtHeader)
  // required int32 originator = 2;
  if (has_originator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->originator(), output);
  }

  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  // repeated .RoutingPath path = 7;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->path(i), output);
  }

  // optional int32 toNode = 8;
  if (has_tonode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tonode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MgmtHeader)
}

::google::protobuf::uint8* MgmtHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MgmtHeader)
  // required int32 originator = 2;
  if (has_originator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->originator(), target);
  }

  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  // repeated .RoutingPath path = 7;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->path(i), target);
  }

  // optional int32 toNode = 8;
  if (has_tonode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tonode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MgmtHeader)
  return target;
}

int MgmtHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 originator = 2;
    if (has_originator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->originator());
    }

    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 toNode = 8;
    if (has_tonode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tonode());
    }

  }
  // repeated .RoutingPath path = 7;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MgmtHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MgmtHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MgmtHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MgmtHeader::MergeFrom(const MgmtHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_originator()) {
      set_originator(from.originator());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_tonode()) {
      set_tonode(from.tonode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MgmtHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MgmtHeader::CopyFrom(const MgmtHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MgmtHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->path())) return false;
  return true;
}

void MgmtHeader::Swap(MgmtHeader* other) {
  if (other != this) {
    std::swap(originator_, other->originator_);
    std::swap(time_, other->time_);
    path_.Swap(&other->path_);
    std::swap(tonode_, other->tonode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MgmtHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MgmtHeader_descriptor_;
  metadata.reflection = MgmtHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Management::kHeaderFieldNumber;
const int Management::kGraphFieldNumber;
const int Management::kBeatFieldNumber;
const int Management::kElectionFieldNumber;
const int Management::kJobProposeFieldNumber;
const int Management::kJobBidFieldNumber;
const int Management::kVoteDeclareFieldNumber;
const int Management::kVoteCastFieldNumber;
const int Management::kVoteStatusFieldNumber;
#endif  // !_MSC_VER

Management::Management()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Management)
}

void Management::InitAsDefaultInstance() {
  header_ = const_cast< ::MgmtHeader*>(&::MgmtHeader::default_instance());
  graph_ = const_cast< ::Network*>(&::Network::default_instance());
  beat_ = const_cast< ::Heartbeat*>(&::Heartbeat::default_instance());
  election_ = const_cast< ::LeaderElection*>(&::LeaderElection::default_instance());
  job_propose_ = const_cast< ::JobProposal*>(&::JobProposal::default_instance());
  job_bid_ = const_cast< ::JobBid*>(&::JobBid::default_instance());
  vote_declare_ = const_cast< ::VotingBallot*>(&::VotingBallot::default_instance());
  vote_cast_ = const_cast< ::VotingCast*>(&::VotingCast::default_instance());
  vote_status_ = const_cast< ::VotingStatus*>(&::VotingStatus::default_instance());
}

Management::Management(const Management& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Management)
}

void Management::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  graph_ = NULL;
  beat_ = NULL;
  election_ = NULL;
  job_propose_ = NULL;
  job_bid_ = NULL;
  vote_declare_ = NULL;
  vote_cast_ = NULL;
  vote_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Management::~Management() {
  // @@protoc_insertion_point(destructor:Management)
  SharedDtor();
}

void Management::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete graph_;
    delete beat_;
    delete election_;
    delete job_propose_;
    delete job_bid_;
    delete vote_declare_;
    delete vote_cast_;
    delete vote_status_;
  }
}

void Management::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Management::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Management_descriptor_;
}

const Management& Management::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();
  return *default_instance_;
}

Management* Management::default_instance_ = NULL;

Management* Management::New() const {
  return new Management;
}

void Management::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_header()) {
      if (header_ != NULL) header_->::MgmtHeader::Clear();
    }
    if (has_graph()) {
      if (graph_ != NULL) graph_->::Network::Clear();
    }
    if (has_beat()) {
      if (beat_ != NULL) beat_->::Heartbeat::Clear();
    }
    if (has_election()) {
      if (election_ != NULL) election_->::LeaderElection::Clear();
    }
    if (has_job_propose()) {
      if (job_propose_ != NULL) job_propose_->::JobProposal::Clear();
    }
    if (has_job_bid()) {
      if (job_bid_ != NULL) job_bid_->::JobBid::Clear();
    }
    if (has_vote_declare()) {
      if (vote_declare_ != NULL) vote_declare_->::VotingBallot::Clear();
    }
    if (has_vote_cast()) {
      if (vote_cast_ != NULL) vote_cast_->::VotingCast::Clear();
    }
  }
  if (has_vote_status()) {
    if (vote_status_ != NULL) vote_status_->::VotingStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Management::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Management)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MgmtHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_graph;
        break;
      }

      // optional .Network graph = 2;
      case 2: {
        if (tag == 18) {
         parse_graph:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_beat;
        break;
      }

      // optional .Heartbeat beat = 3;
      case 3: {
        if (tag == 26) {
         parse_beat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_election;
        break;
      }

      // optional .LeaderElection election = 4;
      case 4: {
        if (tag == 34) {
         parse_election:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_election()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_job_propose;
        break;
      }

      // optional .JobProposal job_propose = 5;
      case 5: {
        if (tag == 42) {
         parse_job_propose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_propose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_job_bid;
        break;
      }

      // optional .JobBid job_bid = 6;
      case 6: {
        if (tag == 50) {
         parse_job_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_vote_declare;
        break;
      }

      // optional .VotingBallot vote_declare = 7;
      case 7: {
        if (tag == 58) {
         parse_vote_declare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vote_declare()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_vote_cast;
        break;
      }

      // optional .VotingCast vote_cast = 8;
      case 8: {
        if (tag == 66) {
         parse_vote_cast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vote_cast()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vote_status;
        break;
      }

      // optional .VotingStatus vote_status = 9;
      case 9: {
        if (tag == 74) {
         parse_vote_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vote_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Management)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Management)
  return false;
#undef DO_
}

void Management::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Management)
  // required .MgmtHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .Network graph = 2;
  if (has_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->graph(), output);
  }

  // optional .Heartbeat beat = 3;
  if (has_beat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->beat(), output);
  }

  // optional .LeaderElection election = 4;
  if (has_election()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->election(), output);
  }

  // optional .JobProposal job_propose = 5;
  if (has_job_propose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->job_propose(), output);
  }

  // optional .JobBid job_bid = 6;
  if (has_job_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->job_bid(), output);
  }

  // optional .VotingBallot vote_declare = 7;
  if (has_vote_declare()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->vote_declare(), output);
  }

  // optional .VotingCast vote_cast = 8;
  if (has_vote_cast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->vote_cast(), output);
  }

  // optional .VotingStatus vote_status = 9;
  if (has_vote_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vote_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Management)
}

::google::protobuf::uint8* Management::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Management)
  // required .MgmtHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .Network graph = 2;
  if (has_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->graph(), target);
  }

  // optional .Heartbeat beat = 3;
  if (has_beat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->beat(), target);
  }

  // optional .LeaderElection election = 4;
  if (has_election()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->election(), target);
  }

  // optional .JobProposal job_propose = 5;
  if (has_job_propose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->job_propose(), target);
  }

  // optional .JobBid job_bid = 6;
  if (has_job_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->job_bid(), target);
  }

  // optional .VotingBallot vote_declare = 7;
  if (has_vote_declare()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->vote_declare(), target);
  }

  // optional .VotingCast vote_cast = 8;
  if (has_vote_cast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->vote_cast(), target);
  }

  // optional .VotingStatus vote_status = 9;
  if (has_vote_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vote_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Management)
  return target;
}

int Management::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MgmtHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .Network graph = 2;
    if (has_graph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->graph());
    }

    // optional .Heartbeat beat = 3;
    if (has_beat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beat());
    }

    // optional .LeaderElection election = 4;
    if (has_election()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->election());
    }

    // optional .JobProposal job_propose = 5;
    if (has_job_propose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->job_propose());
    }

    // optional .JobBid job_bid = 6;
    if (has_job_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->job_bid());
    }

    // optional .VotingBallot vote_declare = 7;
    if (has_vote_declare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vote_declare());
    }

    // optional .VotingCast vote_cast = 8;
    if (has_vote_cast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vote_cast());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .VotingStatus vote_status = 9;
    if (has_vote_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vote_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Management::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Management* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Management*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Management::MergeFrom(const Management& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::MgmtHeader::MergeFrom(from.header());
    }
    if (from.has_graph()) {
      mutable_graph()->::Network::MergeFrom(from.graph());
    }
    if (from.has_beat()) {
      mutable_beat()->::Heartbeat::MergeFrom(from.beat());
    }
    if (from.has_election()) {
      mutable_election()->::LeaderElection::MergeFrom(from.election());
    }
    if (from.has_job_propose()) {
      mutable_job_propose()->::JobProposal::MergeFrom(from.job_propose());
    }
    if (from.has_job_bid()) {
      mutable_job_bid()->::JobBid::MergeFrom(from.job_bid());
    }
    if (from.has_vote_declare()) {
      mutable_vote_declare()->::VotingBallot::MergeFrom(from.vote_declare());
    }
    if (from.has_vote_cast()) {
      mutable_vote_cast()->::VotingCast::MergeFrom(from.vote_cast());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vote_status()) {
      mutable_vote_status()->::VotingStatus::MergeFrom(from.vote_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Management::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Management::CopyFrom(const Management& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Management::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (has_graph()) {
    if (!this->graph().IsInitialized()) return false;
  }
  if (has_beat()) {
    if (!this->beat().IsInitialized()) return false;
  }
  if (has_election()) {
    if (!this->election().IsInitialized()) return false;
  }
  if (has_job_propose()) {
    if (!this->job_propose().IsInitialized()) return false;
  }
  if (has_job_bid()) {
    if (!this->job_bid().IsInitialized()) return false;
  }
  if (has_vote_declare()) {
    if (!this->vote_declare().IsInitialized()) return false;
  }
  if (has_vote_cast()) {
    if (!this->vote_cast().IsInitialized()) return false;
  }
  if (has_vote_status()) {
    if (!this->vote_status().IsInitialized()) return false;
  }
  return true;
}

void Management::Swap(Management* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(graph_, other->graph_);
    std::swap(beat_, other->beat_);
    std::swap(election_, other->election_);
    std::swap(job_propose_, other->job_propose_);
    std::swap(job_bid_, other->job_bid_);
    std::swap(vote_declare_, other->vote_declare_);
    std::swap(vote_cast_, other->vote_cast_);
    std::swap(vote_status_, other->vote_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Management::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Management_descriptor_;
  metadata.reflection = Management_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
